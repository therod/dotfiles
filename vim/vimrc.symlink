" This is Rodrigo Haenggi's .vimrc file

set nocompatible
filetype off                  " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VUNDLE (https://github.com/gmarik/vundle)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VUNDLES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Core
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/taglist.vim'
Plugin 'mileszs/ack.vim'
Plugin 'skalnik/vim-vroom'

" Utils
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/AutoTag'
Plugin 't9md/vim-ruby-xmpfilter'
Plugin 'rizzatti/dash.vim'

" Ruby & Rails
Plugin 'vim-ruby/vim-ruby'
Plugin 'sunaku/vim-ruby-minitest'
Plugin 'tpope/vim-rails'
Plugin 'danchoi/ri.vim'
Plugin 'lucapette/vim-ruby-doc'

" HTML & CSS & Others
Plugin 'kchmck/vim-coffee-script'
Plugin 'othree/html5.vim'
Plugin 'tpope/vim-haml'

" Markdown etc.
Plugin 'tpope/vim-markdown'
Plugin 'duwanis/tomdoc.vim'

" Colorschemes
Plugin 'altercation/vim-colors-solarized'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256
colorscheme solarized
let g:solarized_termcolor=256

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on
syntax on

set autoindent
set nocursorcolumn
set backspace=indent,eol,start
set cmdheight=1
set encoding=utf-8
set expandtab
set formatoptions+=n
set hidden
set hlsearch
set ignorecase smartcase
set incsearch
set laststatus=2
set history=2000
set nolazyredraw
set noshowcmd
set nosmarttab
set nostartofline
set nowrap
set number
set report=0
set scrolloff=3
set shell=zsh
set shiftwidth=2
set shortmess=filtIoOA
set showmatch
set showtabline=1
set smartindent
set softtabstop=2
set switchbuf=useopen
set tabstop=4
set virtualedit=block
set whichwrap+=<,>,h,l,[,]
set wildmenu
set wildmode=longest,list

" Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  autocmd FileType text setlocal textwidth=78
  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  "for ruby, autoindent with two spaces, always expand tabs
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et
  autocmd FileType python set sw=4 sts=4 et

  autocmd! BufRead,BufNewFile *.sass setfiletype sass

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TABS N SHIT | TODO: Add shortcuts to jump to specific tabs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-t> :tabnew<CR>
map <C-l> :tabnext<CR>
map <C-h> :tabprev<CR>

" ----------------------------------------------------------------------------
" REMAPPING
" ----------------------------------------------------------------------------
let mapleader = ","
map WW :w!<CR>

nnoremap Q gqap
vnoremap Q gq
"sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Map ,e and ,v to open files in the same directory as the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>V :view %%

" Search for open Todos inside the directory structure
map <leader>N :Ack --ignore-dir=log 'TODO\|FIXME\|CHANGED\|NOTE' *<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Control P
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildignore+=*/vendor/rails/*
set wildignore+=*/.bundle/*
set wildignore+=*/tmp/*
set wildignore+=*/build/*
let g:ctrlp_match_window = 'bottom'
let g:ctrlp_use_caching = 0 "Do not use caching
let g:ctrlp_max_height = 20 "Display 20 results
let g:ctrlp_show_hidden = 0 "Do not scan for dotfiles and dotdirs

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let vroom_detect_spec_helper = 1
let g:vroom_use_spring = 0 "enable spring by default
let g:vroom_use_colors = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RI Documentation lookup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap  ,di :call ri#OpenSearchPrompt(0)<cr> " horizontal split
nnoremap  ,DI :call ri#OpenSearchPrompt(1)<cr> " vertical split
nnoremap  ,DK :call ri#LookupNameUnderCursor()<cr> " keyword lookup

let g:ruby_doc_command='open'

" ----------------------------------------------------------------------------
" STATUS LINE
" ----------------------------------------------------------------------------
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

" ----------------------------------------------------------------------------
" MISC KEY MAPS
" ----------------------------------------------------------------------------
" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" Shortcut to rapidly toggle `set list
nmap <leader>l :set list!<cr>

" xmpfilter awesomeness!
nmap <buffer> <leader>x <Plug>(xmpfilter-run)
nmap <buffer> <leader>X <Plug>(xmpfilter-mark)
" ---------------------------------------------------------------------------
" STRIP ALL TRAILING WHITESPACE
" ---------------------------------------------------------------------------
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

" ---------------------------------------------------------------------------
" CUSTOM HIGHLIGHTS
" ---------------------------------------------------------------------------
" " Whitespace
" highlight TrailSpace ctermbg=red
" 2match TrailSpace / \+$/
" autocmd ColorScheme * highlight TrailSpace guibg=red ctermbg=red

" " ERUBY lines
" highlight ErbLines ctermbg=8
" match ErbLines /<%\(=\|\)\(.\{-}\)%>/
" autocmd ColorScheme * highlight ErbLines ctermbg=8
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
      return "\<tab>"
  else
      return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" ---------------------------------------------------------------------------
" CTAGS / DASH
" ---------------------------------------------------------------------------
map <leader>ta :exec("tag ".expand("<cword>"))<CR>
map <leader>ts :vsp <CR>:exec("tag " .expand("<cword>"))<CR>
map <Leader>tt1 :!ctags --extra=+f --exclude=.git --exclude=log -R * `rbenv prefix`/lib/ruby/gems/1.9.1/gems/*<CR><CR>
map <Leader>tt :!ctags --extra=+f --exclude=.git --exclude=log -R * `rbenv prefix`/lib/ruby/gems/2.1.0/gems/*<CR><CR>
set tags+=./tags;

map <leader>da :Dash<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ARROW KEYS ARE UNACCEPTABLE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Left> :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up> :echo "no!"<cr>
map <Down> :echo "no!"<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OS X Specific
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Open the file using Marked.app => Good for previewing MARKDOWN files
map <leader>p :!open -a /Applications/Marked.app '%'<cr>

" ---------------------------------------------------------------------------
" VARIOUS
" ---------------------------------------------------------------------------
let g:netrw_home = $HOME
